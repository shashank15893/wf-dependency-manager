# Supply Chain Dependency Chart - Setup Instructions

This document provides instructions to set up and run the Supply Chain Dependency Chart application on your local machine. The application consists of a React frontend and a Node.js backend that connects to a MySQL database.

## Prerequisites

Make sure you have the following installed on your machine:

- Node.js (v14 or higher)
- npm (v6 or higher)
- MySQL (v5.7 or higher)

## Step 1: Database Setup

1. Start your MySQL server
2. Log in to MySQL using your credentials
3. Run the SQL commands from the `database-setup.sql` file to create the database and tables:

```bash
mysql -u your_username -p < database-setup.sql
```

Alternatively, you can copy and paste the SQL commands directly into your MySQL client.

## Step 2: Backend Setup

1. Create a new directory for your project:

```bash
mkdir supply-chain-app
cd supply-chain-app
mkdir backend
cd backend
```

2. Initialize a new Node.js project:

```bash
npm init -y
```

3. Install the required dependencies:

```bash
npm install express mysql2 cors dotenv
```

4. Create a `.env` file in the backend directory with your MySQL configuration:

```
PORT=5000
DB_HOST=localhost
DB_USER=your_username
DB_PASSWORD=your_password
DB_NAME=supply_chain_db
```

5. Create a `server.js` file and copy the code from the provided backend API file.

6. Start the backend server:

```bash
node server.js
```

You should see a message that the server is running on port 5000.

## Step 3: Frontend Setup

1. In a new terminal window, navigate back to your project root directory and create a React app:

```bash
cd ..
npx create-react-app frontend
cd frontend
```

2. Install the required dependencies:

```bash
npm install axios lucide-react
```

3. Create a file called `.env` in the frontend directory with the following content:

```
REACT_APP_API_URL=http://localhost:5000/api
```

4. Configure the proxy in `package.json` by adding:

```json
"proxy": "http://localhost:5000",
```

5. Replace the content of `src/App.js` with the code from the Supply Chain Dependency Chart component.

6. Start the React development server:

```bash
npm start
```

The application should open in your browser at http://localhost:3000.

## Project Structure

Your project should have the following structure:

```
supply-chain-app/
├── backend/
│   ├── node_modules/
│   ├── .env
│   ├── package.json
│   └── server.js
├── frontend/
│   ├── node_modules/
│   ├── public/
│   ├── src/
│   │   ├── App.js
│   │   ├── index.js
│   │   └── ...
│   ├── .env
│   └── package.json
└── database-setup.sql
```

## Troubleshooting

### Database Connection Issues

- Ensure your MySQL server is running
- Verify the credentials in the `.env` file
- Check that the database `supply_chain_db` exists
- Ensure the MySQL user has appropriate permissions

### API Connection Issues

- Confirm that the backend server is running on port 5000
- Check the browser console for any CORS errors
- Verify that the proxy is correctly set in `package.json`

### Data Not Displaying

- Check the browser console for any errors
- Verify the API response using a tool like Postman
- Ensure the database contains data (run the sample inserts)

## Customization

You can customize the application by:

1. Adding more data to the database
2. Re-enabling the filter functionality in the frontend
3. Modifying the node styling and colors
4. Adding additional API endpoints for more functionalities

## Production Deployment

For production deployment:

1. Build the React app:
```bash
cd frontend
npm run build
```

2. Configure your backend to serve the static files from the build directory.
3. Set up proper security measures (HTTPS, authentication, etc.)
4. Use a process manager like PM2 to keep the Node.js server running
